# 营销工具客服专属优惠看板设计文档
## 一、引言
### （一）背景
在电商运营过程中，商家期望借助多样化的营销工具提升店铺的销售业绩与运营效率。客服专属优惠作为一种特殊营销手段，能在客服与消费者沟通场景中，直接对商品金额进行立减优惠，且该优惠可与其他优惠叠加，同时不计入商品最低价。这一工具对提高客服询单转化率效果显著，进而有助于整体提升店铺销量。为了让商家能够清晰、直观地掌握客服专属优惠的活动效果，特设计此营销工具客服专属优惠看板。

### （二）目的
本设计文档将全方位阐述营销工具客服专属优惠看板的设计思路、数据处理流程、关键指标计算方式以及最终呈现形式等内容。旨在为开发团队提供精准、详尽的开发指导，确保所设计的看板能够高效、准确地展示客服专属优惠活动的各项关键数据，充分满足商家对活动效果分析与评估的需求，助力商家基于数据做出更科学合理的决策。

## 二、ADS层表设计
### （一）表名
`ads_customer_service_exclusive_discount`

### （二）字段信息
|字段名称|字段类型|描述|
| ---- | ---- | ---- |
|`activity_id`|STRING|活动编号，用于唯一标识每一个客服专属优惠活动|
|`activity_name`|STRING|活动名称，方便商家直观识别活动|
|`activity_level`|STRING|活动级别，分为商品级和SKU级，表明优惠作用的粒度|
|`discount_type`|STRING|优惠类型，包含固定优惠和自定义优惠，让商家了解优惠设定方式|
|`discount_amount`|INT|优惠金额，明确每次优惠的具体数值|
|`start_time`|TIMESTAMP|活动开始时间，记录活动起始时刻|
|`end_time`|TIMESTAMP|活动结束时间，标记活动截止时间|
|`send_count`|INT|发送次数，统计该优惠活动被客服发送给消费者的次数|
|`pay_count`|INT|支付次数，记录消费者使用该优惠完成支付的次数|
|`total_pay_amount`|DECIMAL(10,2)|累计支付金额，统计使用该优惠完成支付的总金额|
|`pay_buyer_count`|INT|支付买家数，统计使用该优惠完成支付的买家数量|
|`customer_service_id`|STRING|客服ID，标识发送优惠的客服人员|
|`customer_service_name`|STRING|客服姓名，方便商家对应到具体客服人员|
|`dt`|STRING|日期分区，用于按日期对数据进行划分，方便数据管理与统计|

## 三、原始数据分析
### （一）数据来源
原始数据主要来源于电商平台的多个业务数据库。其中包括记录客服专属优惠活动创建详细信息的数据库表，涵盖活动名称、编号、级别、优惠类型、金额等；记录优惠发送操作的数据库表，记录发送时间、发送客服等；记录优惠核销信息的数据库表，明确核销时间、对应的订单等；以及记录订单支付信息的数据库表，包含支付金额、支付用户等关键数据。这些不同来源的数据相互关联，共同构成了分析客服专属优惠活动效果的基础。

### （二）数据特点
1. **时间属性强**：数据具有明显的时间特性，不同时间点的活动创建、发送、核销以及订单支付等行为产生的数据，需要按照不同时间维度，如按日、7天、30天等进行细致统计分析，以洞察活动效果随时间的变化趋势。
2. **多维度特性**：数据涉及多个维度，从活动本身的维度，如活动级别、优惠类型；到客服维度，如客服ID和姓名；再到消费者维度，如支付买家数等。这些多维度的数据需要进行有机整合与多维度的聚合分析，才能全面展现活动效果。
3. **数据逻辑关系复杂**：存在支付次数大于发送次数的特殊情况。这是因为优惠的使用周期设定为24小时，在统计某一天的发送次数和支付次数时，当天的支付次数中会包含前一天发送的优惠在当天被消费者使用并完成支付的订单，这就要求在数据处理和指标计算过程中，充分考虑这种复杂的数据逻辑关系，以确保数据统计的准确性。

## 四、关键指标实现方案
### （一）数据概览指标
1. **30天、7天、昨天的发送及核销概览数据**
- **实现思路**：利用大数据处理框架，基于时间窗口对`send_count`（发送次数）、`pay_count`（支付次数）、`total_pay_amount`（累计支付金额）等核心字段进行分组聚合计算。通过设定时间范围，筛选出对应时间周期内的数据，并进行相应的求和操作。
- **具体SQL示例（以30天为例）**：
```sql
SELECT 
    SUM(send_count) AS total_send_count, 
    SUM(pay_count) AS total_pay_count, 
    SUM(total_pay_amount) AS total_pay_amount
FROM 
    ads_customer_service_exclusive_discount
WHERE 
    dt BETWEEN DATE_SUB(CURRENT_DATE(), 29) AND CURRENT_DATE();
```
此SQL语句通过`DATE_SUB`函数获取当前日期往前推29天的日期，与当前日期构成30天的时间范围，然后对符合该时间范围的数据进行字段求和，从而得出30天内的发送次数总和、支付次数总和以及累计支付金额。

### （二）客服数据指标
1. **每个客服发送及核销的情况**
- **实现思路**：以`customer_service_id`和`customer_service_name`作为分组依据，对发送次数、支付次数等关键指标进行聚合计算。通过这种分组方式，能够将每个客服的相关数据进行汇总，清晰呈现每个客服在优惠发送及核销过程中的表现。
- **具体SQL示例**：
```sql
SELECT 
    customer_service_id, 
    customer_service_name, 
    SUM(send_count) AS send_count, 
    SUM(pay_count) AS pay_count
FROM 
    ads_customer_service_exclusive_discount
GROUP BY 
    customer_service_id, 
    customer_service_name;
```
上述SQL语句从`ads_customer_service_exclusive_discount`表中，按`customer_service_id`和`customer_service_name`分组，对`send_count`和`pay_count`分别进行求和操作，得到每个客服的发送次数和支付次数统计结果。

### （三）发送明细指标
1. **每一条发送的明细及核销情况**
- **实现思路**：直接从`ads_customer_service_exclusive_discount`表中查询所需的原始字段，包括活动编号、活动名称、发送时间、支付时间、优惠金额等。这些字段能够完整呈现每一次优惠发送及后续核销的详细过程。
- **具体SQL示例**：
```sql
SELECT 
    activity_id, 
    activity_name, 
    send_time, 
    pay_time, 
    discount_amount
FROM 
    ads_customer_service_exclusive_discount;
```
该SQL语句简单直接地从指定表中选取所需字段，查询出每一条优惠发送及核销相关的明细数据。

### （四）活动效果指标
1. **不同状态下单个活动效果数据**
- **实现思路**：按照活动编号和活动状态进行分组，对发送次数、支付次数、累计支付金额等关键指标进行聚合计算。通过这种分组聚合方式，能够清晰展现不同活动在不同状态下（如进行中、已结束等）的效果数据，方便商家对比分析不同活动的表现。
- **具体SQL示例**：
```sql
SELECT 
    activity_id, 
    activity_name, 
    activity_status, 
    SUM(send_count) AS send_count, 
    SUM(pay_count) AS pay_count, 
    SUM(total_pay_amount) AS total_pay_amount
FROM 
    ads_customer_service_exclusive_discount
GROUP BY 
    activity_id, 
    activity_name, 
    activity_status;
```
此SQL语句从表中按活动编号、活动名称和活动状态分组，对发送次数、支付次数和累计支付金额进行求和，得到不同状态下单个活动的相关效果数据统计。

## 五、实现思路总结
### （一）技术选型
本看板的开发将选用Spark 3.2及以上版本作为大数据处理框架，并采用PySpark+Sparksql进行具体的代码编写。Spark具有强大的分布式数据处理能力，能够高效处理海量的电商数据；PySpark作为Python与Spark的接口，方便开发人员利用Python语言的简洁性和丰富的库进行开发；Sparksql则为结构化数据处理提供了便捷的操作方式，能够很好地满足对客服专属优惠数据的处理需求。

### （二）数据处理流程
1. **数据抽取**：从电商平台的各个业务数据库中，通过ETL（Extract，Transform，Load）工具或自定义的数据抽取脚本，按照预定的数据抽取规则，将与客服专属优惠相关的原始数据抽取出来。确保数据的完整性和准确性，为后续处理提供可靠的数据基础。
2. **数据清洗**：对抽取到的数据进行清洗操作，包括去除重复数据、处理缺失值、纠正错误数据格式等。通过数据清洗，提高数据质量，避免因数据噪声影响后续的数据分析和指标计算。
3. **数仓分层处理**：遵循数仓分层架构理念，将数据依次从ODS（Operational Data Store，操作数据存储层）层经过清洗、转换后加载到DWD（Data Warehouse Detail，数据明细层）层，在DWD层进行更细致的数据整合与加工；然后进一步汇总到DWS（Data Warehouse Summary，数据汇总层）层，形成面向主题的汇总数据；最终在ADS（Application Data Service，应用数据服务层）层完成数据的最终处理和聚合，生成满足看板需求的各项数据指标。
4. **看板代码实现**：在代码实现方面，将分别开发分层和不分层两种实现方式，但严格确保两种方式下的指标计算逻辑完全一致。分层实现方式有助于提高代码的可维护性和扩展性，方便对不同层次的数据处理逻辑进行单独优化和管理；不分层实现方式则在一定程度上简化了代码结构，适用于对性能和扩展性要求相对较低的场景。同时，在代码编写过程中，将严格遵循既定的代码规范，添加详细、清晰的注释，以提高代码的可读性，方便后续开发人员对代码进行理解、维护和修改。 