# #   物流离线数仓项目
#     #
#         面试官你好,我叫刘孟涵,过去 5 年，我扎根大数据开发领域，
#         从基础的数据同步引擎调优到复杂的实时数仓架构设计,今天介绍的是物流离线数仓项目
#         在技术栈上，我不仅精通 Java 和 Scala 双语言开发，能手写高性能 MapReduce 算子优化 Hadoop 集群任务效率，
#         还深度掌握 Hive 底层原理 —— 曾针对某电商平台的订单表，通过重构分桶策略和优化 UDF 函数，将离线统计任务从 4 小时压缩至 45 分钟；
#         MySQL 方面，我擅长设计高并发场景下的分库分表方案，主导过物流系统订单库从单表 数据到 16 库 64 表的平滑迁移，读写性能提升 7 倍；
#         实时计算领域，我基于 Flink 实现过金融级风控系统，通过自定义 StateBackend 和 Checkpoint 优化，支撑了每秒 大量 的交易数据清洗与规则匹配，
#         延迟控制在 200ms 内。
#     #   项目介绍:
#         项目通过分层设计来处理数据，主要包括：
#             ODS 层：存储原始数据，比如订单信息、运输任务、司机和车辆信息等，保留数据原貌。
#             DIM 层：通过标准化维度表存储物流业务中各类关键实体的描述性信息，为事实数据（如订单、运输任务）提供上下文标签，支撑多维度分析与决策。
#             DWD 层：对原始数据清洗整理，拆分成不同业务事实表，比如下单、支付、运输完成等明细数据。
#             DWS 层：按主题汇总数据，比如按机构、城市、货物类型统计下单量、运输里程等。
#             ADS 层：生成直接可用的分析指标，供业务查看，比如各城市运输效率、司机绩效、快递派送情况等。
#         ODS层:
#             在物流离线数仓的 ODS(操作数据存储)层里,这些表各自承担不同业务数据采集职能:
#             一、业务核心流程相关
#                 1.ods_order_info(订单信息表)
#                     物流业务围绕订单开展,它存储订单基础信息，像订单编号、下单时间、货物信息、收发方等 。是分析订单量、订单分布、订单生命周期（创建 - 配送 - 完成）的核心数据源，无论是统计业务量，还是排查订单履约问题，都离不开它，堪称订单全流程分析的基石。
#                 2.ods_transport_task(运输任务表)与 ods_transport_task_detail(运输任务明细表)
#                     运输是物流关键环节,ods_transport_task 记录运输任务整体信息,比如任务编号、任务状态（待执行、运输中、已完成等）、计划运输路线；ods_transport_task_detail 细化到任务执行细节，像车辆调度信息、司机分配、实际运输里程、耗时等。两者结合，能分析运输任务效率（是否按时完成、里程与耗时是否匹配）、车辆与司机资源利用情况，对优化运输调度意义重大。
#                 3. ods_express_task_collect（快递揽收任务表）与 ods_express_task_delivery（快递派送任务表）
#                     聚焦快递业务的揽收和派送环节，揽收是物流起点，派送是服务末端。表中存储任务执行时间、负责人员、地址、货物状态等信息。可分析快递揽收及时率、派送成功率，挖掘揽收 - 派送环节的协同问题，提升快递服务质量，是快递业务流程监控的关键数据来源。
#             二、基础信息支撑相关
#                 1. ods_base_organ（机构基础信息表）
#                     机构是物流业务的组织单元，表中涵盖机构编码、名称、层级（总部 - 分公司 - 站点等）、所属区域等。做业务分析时，按机构维度统计（比如不同分公司订单量、运输任务量），衡量各机构运营表现，也是构建组织架构 - 业务数据关联分析的基础，没有它，跨机构业务对比、管理会陷入混乱 。
#                 2. ods_base_region_info（区域基础信息表）
#                     物流业务与地理区域强相关，该表存储区域编码、名称、父级区域（省 - 市 - 区 / 县）、区域类型（比如城市、乡村）等。结合业务数据，可分析不同区域业务量分布（哪些区域订单多、运输需求大）、区域物流服务能力（比如偏远地区派送时效），为区域运力布局、资源投放提供依据，是地理维度业务分析的必备基础。
#                 3. ods_truck_info（车辆信息表）与 ods_truck_driver（司机信息表）
#                     车辆和司机是运输执行的主体，ods_truck_info 记录车辆型号、牌照、载重、所属车队等；ods_truck_driver 存储司机资质、所属机构、驾驶经验等。分析车辆利用率（是否满负荷运转）、司机绩效（运输任务完成质量、效率），优化车辆与司机资源配置，保障运输业务顺畅，这两张表是运输资源管理与分析的核心支撑 。
#             三、业务关联与拓展相关
#                 1. ods_order_trace_log（订单轨迹日志表）
#                     记录订单在物流流程中的关键节点信息（如订单到达仓库、开始运输、到达中转站、派送中、已签收等状态及时间）。通过它能还原订单全流程轨迹，分析各环节耗时，找出流程瓶颈（比如中转环节延误），还可用于客户查询订单进度，是提升服务透明度、优化流程的重要数据来源 。
#                 2. ods_line_base_info（线路基础信息表）与 ods_line_base_shift（线路班次信息表）
#                     线路是运输的路径规划，ods_line_base_info 存线路编码、起讫点、线路长度、预计耗时等；ods_line_base_shift 记录线路上的班次安排（发车时间、频次、承运车辆 / 司机）。分析线路运营效率（实际耗时与预计耗时差异）、班次饱和度（是否满单），优化线路规划和班次设置，降低运输成本，提升资源利用效率，对运输网络优化至关重要 。
#             ODS层业务核心表结构介绍:
#                 ods_order_info(订单信息表):
#                     # id	bigint	数据库唯一主键，相当于订单在系统里的 “身份证”，精准定位单条订单数据
#                     # order_no	string	业务侧订单编号（如 ORD20250801001），是用户 / 客服识别订单的核心标识
#                     # status	string	订单状态（如 待揽收/运输中/已签收），反映物流流程进展
#                     # collect_type	string	揽收方式（如 上门揽收/网点自寄），区分订单起始环节的服务模式
#                     # sender_complex_id	bigint	寄件方复杂地址 ID（如企业园区 / 仓库编码），关联组织化收件信息
#                     # sender_province_id	string	寄件省份编码（如 110000 代表北京），用于区域发货量统计
#                     # sender_city_id	string	寄件城市编码（如 110100 代表北京市），细化城市级发货分析
#                     # sender_district_id	string	寄件区县编码（如 110101 代表东城区），精准到区县的发货数据维度
#                     # sender_address	string	寄件详细地址（街道 / 门牌号），物流揽收的具体位置
#                     # sender_name	string	寄件人姓名，用于揽收时身份确认
#                     # sender_phone	string	寄件人电话，揽收沟通的核心联系方式
#                     # send_location	string	寄件定位信息（经纬度 / 地址描述），辅助揽收路线规划
#                     # receiver_complex_id	bigint	收件方复杂地址 ID（如企业 / 园区编码），关联组织化收件信息
#                     # receiver_province_id	string	收件省份编码（如 310000 代表上海），用于区域配送量统计
#                     # receiver_city_id	string	收件城市编码（如 310100 代表上海市），细化城市级配送分析
#                     # receiver_district_id	string	收件区县编码（如 310104 代表徐汇区），精准到区县的配送数据维度
#                     # receiver_address	string	收件详细地址（街道 / 门牌号），物流派送的具体目的地
#                     # receiver_name	string	收件人姓名，用于派送时身份确认
#                     # receiver_phone	string	收件人电话，派送沟通的核心联系方式
#                     # receive_location	string	收件定位信息（经纬度 / 地址描述），辅助配送路线规划
#                     # payment_type	string	支付方式（如 在线支付/到付/月结），区分订单付款模式
#                     # cargo_num	int	货物数量（如 3 件），用于仓库清点、车辆配载规划
#                     # amount	decimal(32,2)	订单金额（保留 2 位小数），财务核算与业务价值分析的核心指标
#                     # estimate_arrive_time	string	预计到达时间（如 2025-08-03 18:00），承诺用户的送达时效
#                     # distance	decimal(10,2)	运输距离（单位：公里），用于核算运输成本、优化路线
#                     # create_time	string	订单创建时间（用户下单成功时间），分析订单时间分布、流程耗时的起点
#                     # update_time	string	订单更新时间（状态 / 信息变更时间），跟踪订单变更历史、排查异常
#                     # is_deleted	string	逻辑删除标识（Y/N），标记订单是否作废，保障数据完整性
#                     # dt	string	分区字段（一般为日期，如 20250801），用于按时间分区存储，提升查询效率
#                 ods_transport_task(运输任务表):
#                     # id	bigint	表记录的唯一标识，类似 “数据身份证”，用于精准定位单条记录
#                     # shift_id	bigint	班次 ID，关联班次基础信息，标识当前记录属于哪个物流班次
#                     # line_id	bigint	线路 ID，关联线路信息表，说明该班次对应的物流运输线路
#                     # start_org_id	bigint	起始机构 ID，关联机构信息，标记班次出发的物流机构（如分拨中心、站点）
#                     # start_org_name	string	起始机构名称，直观显示出发机构的名称，方便业务理解
#                     # end_org_id	bigint	到达机构 ID，关联机构信息，标记班次抵达的物流机构
#                     # end_org_name	string	到达机构名称，直观显示抵达机构的名称
#                     # status	string	班次状态，如 “待执行”“运输中”“已完成” 等，反映班次当前业务进展
#                     # order_num	int	关联订单数量，记录该班次承载的物流订单总数
#                     # driver1_emp_id	bigint	主司机员工 ID，关联司机信息表，标记负责该班次的第一位司机
#                     # driver1_name	string	主司机姓名，直观显示第一位司机的名称
#                     # driver2_emp_id	bigint	副司机员工 ID（若有），关联司机信息表，标记第二位司机（如长途班次）
#                     # driver2_name	string	副司机姓名，直观显示第二位司机的名称
#                     # truck_id	bigint	车辆 ID，关联车辆信息表，标记执行该班次的货车
#                     # truck_no	string	车牌号，直观显示货车的车牌号码，方便业务识别
#                     # actual_start_time	string	实际出发时间，记录班次真正开始运输的时间点
#                     # actual_end_time	string	实际到达时间，记录班次真正完成运输的时间点
#                     # actual_distance	decimal(16,2)	实际运输距离，记录该班次实际行驶的里程数（单位：公里等，保留 2 位小数 ）
#                     # create_time	string	记录创建时间，即该班次信息录入系统的时间点
#                     # update_time	string	记录更新时间，班次信息（如状态、时间等 ）有变更时，更新此时间点
#                     # is_deleted	string	逻辑删除标识，标记该记录是否失效（如 Y 表示删除，N 表示有效 ）
#                     # dt	string	分区字段，通常存日期（如 20250801 ），用于按日期分区存储和查询数据
#                 ods_transport_task_detail(运输任务明细表):
#                     # id	bigint	表记录的唯一标识，就像每一条数据的 “身份证”，用来精准找到某一条具体信息
#                     # order_id	bigint	关联的订单 ID，标记这条记录对应哪个物流订单，用于和订单表做关联
#                     # start_org_id	bigint	起始机构 ID，代表物流流程中出发端的机构（比如发货站点、分拨中心 ）
#                     # end_org_id	bigint	到达机构 ID，代表物流流程中到达端的机构（比如收货站点、目的分拨中心 ）
#                     # line_base_id	bigint	基础线路 ID，关联线路信息表，标记这条业务对应的预设物流线路
#                     # create_time	string	记录创建时间，即这条数据第一次录入系统的时间点
#                     # update_time	string	记录更新时间，当这条数据的状态、信息变更时（比如机构调整 ），更新此时间
#                     # is_deleted	string	逻辑删除标记，用 Y/N 等标识这条记录是否 “失效”（并非真正删除数据 ）
#                     # dt	string	分区字段，一般存日期（如 20250801 ），方便按时间范围查询、管理数据
#                 ods_express_task_collect(快递揽收任务表):
#                     # id	bigint	记录的唯一标识，每条数据的 “身份证”，方便精准查找
#                     # order_id	bigint	关联的订单 ID，标记这条记录属于哪个物流订单（串联订单主表）
#                     # status	string	订单在当前机构的状态（如 待揽收/已揽收/已取消 ），反映流程进度
#                     # org_id	bigint	机构 ID，标记当前记录对应的物流机构（如站点、分拨中心）
#                     # org_name	string	机构名称，直观显示是哪个站点 / 分拨中心（方便业务人员识别）
#                     # courier_emp_id	bigint	快递员员工 ID，标记负责该订单的快递员
#                     # courier_name	string	快递员姓名，直观显示是谁负责该订单的操作
#                     # estimated_collected_time	string	预计揽收时间（计划中该订单的揽收时间点）
#                     # estimated_commit_time	string	预计交付时间（计划中该订单从当前机构转出 / 交付的时间点）
#                     # actual_collected_time	string	实际揽收时间（快递员真正完成揽收的时间点）
#                     # actual_commit_time	string	实际交付时间（订单真正从当前机构转出 / 交付的时间点）
#                     # cancel_time	string	取消时间（若订单在当前机构节点被取消，记录取消的时间点）
#                     # remark	string	备注信息（如异常说明：“客户改地址，延迟揽收” ）
#                     # create_time	string	记录创建时间（这条数据录入系统的初始时间）
#                     # update_time	string	记录更新时间（状态、时间等信息变更时，更新此时间）
#                     # is_deleted	string	逻辑删除标记（Y/N 表示是否 “删除”，实际不物理删除，保留数据痕迹 ）
#                     # dt	string	分区字段（通常存日期，如 20250801 ），用于按时间管理数据
#                 ods_express_task_delivery(快递派送任务表):
#                     # id	bigint	记录唯一标识，每条配送记录的 “身份证”，方便精准查询
#                     # order_id	bigint	关联的订单 ID，标记这条配送记录属于哪个物流订单（串联订单主数据）
#                     # status	string	配送状态（如 待配送/配送中/已签收 ），反映订单配送进度
#                     # org_id	bigint	机构 ID，标记负责配送的物流机构（如站点、配送中心）
#                     # org_name	string	机构名称，直观显示是哪个站点 / 中心负责配送（方便业务识别）
#                     # courier_emp_id	bigint	快递员员工 ID，标记实际执行配送的快递员
#                     # courier_name	string	快递员姓名，直观显示是谁在配送该订单
#                     # estimated_end_time	string	预计完成配送时间（计划中该订单要送达的时间点）
#                     # start_delivery_time	string	实际开始配送时间（快递员真正出发配送的时间点）
#                     # delivered_time	string	实际完成配送时间（订单成功签收 / 交付的时间点）
#                     # is_rejected	string	是否拒收（Y/N 标记收件人是否拒收包裹）
#                     # create_time	string	记录创建时间（这条配送信息录入系统的初始时间）
#                     # update_time	string	记录更新时间（状态、时间等信息变更时，更新此时间）
#                     # is_deleted	string	逻辑删除标记（Y/N 表示是否 “删除”，保留数据痕迹不物理删除 ）
#                     # dt	string	分区字段（存日期，如 20250801 ），用于按时间管理配送数据
#         这些表从订单核心、运输执行、基础信息、业务关联等角度，支撑物流数仓对业务的分析与洞察.
#
#         DIM层:
#             该物流离线数仓项目的 DIM（维度）层包含多个关键维度表，为物流业务分析提供了多视角基础数据支持，在数据仓库体系中起着关键作用，具体介绍如下：
#                 1.维度表的分类与用途:
#                     # 基础地理维度：小区维度表（dim_complex_full）、地区维度表（dim_region_full）存储地址相关信息。小区维度表关联小区与负责快递员、所在地区，地区维度表呈现地区层级和编码，用于分析物流在不同地区的分布与运营差异，比如了解各城市或区县的业务量和配送效率。
#
#                     # 组织架构维度：机构维度表（dim_organ_full）记录机构的等级、地区关联和层级关系，用于分析不同层级机构（转运中心、转运站）的业务表现，为资源分配和运营决策提供依据。
#
#                     # 人员角色维度：快递员维度表（dim_express_courier_full）和司机维度表（dim_truck_driver_full）分别记录快递员和司机的详细信息，包括所属机构、联系方式、工作类型和资质等，有助于管理和评估人员工作效率与服务质量。
#
#                     # 运输资源维度：班次维度表（dim_shift_full）和卡车维度表（dim_truck_full）管理运输资源信息。班次维度表涵盖线路、机构、车辆和司机等信息，用于优化运输调度；卡车维度表记录车辆技术参数和状态，帮助企业管理车辆资源和规划运输任务。
#
#                     # 用户相关维度：用户拉链表（dim_user_zip）和用户地址拉链表（dim_user_address_zip）保存用户和地址信息。用户拉链表记录用户基本信息和状态变化，用户地址拉链表存储地址详情和使用状态，支持分析用户行为和优化配送服务。
#                 2.数据处理与维护:
#                     # 数据加载：从 ods_* 等数据源获取数据，如 ods_base_complex_full、ods_base_organ_full 等。采用插入覆盖（insert overwrite）方式，按日期（dt 字段）分区存储，确保数据时效性和可追溯性。
#
#                     # 更新策略：部分表如用户拉链表和用户地址拉链表，使用拉链表技术处理缓慢变化维度，记录数据的历史版本，通过 start_date 和 end_date 字段标记数据的有效时间范围，便于分析数据变化趋势。
#                 3.在项目中的作用:
#                     # 提供分析视角：为业务分析提供丰富的维度信息，帮助企业从不同角度理解物流业务，如按地区、机构、人员、运输资源和用户等维度分析业务指标。
#
#                     # 数据整合与关联：通过维度表的主键关联其他层（如 DWD、DWS 层）的事实表，整合分散在不同业务系统的数据，为综合分析提供支持。例如，结合订单事实表与地区维度表，分析不同地区的订单量和销售额分布。
#
#                     # 支持决策制定：为企业决策提供数据基础，如依据机构维度表评估机构运营情况，为机构扩张或优化提供数据支持；通过分析运输资源维度表，合理安排车辆和人员，提高运输效率，降低成本。
#             DIM层表字段介绍:
#                 小区维度表(dim_complex_full):
#                     # id	bigint	小区维度记录的唯一 ID，每条小区数据的 “身份证”
#                     # complex_name	string	小区名称（如 XX 花园/XX 小区 ），直观识别小区
#                     # courier_emp_ids	array<string>	负责该小区的快递员员工 ID 列表（可能多个快递员分片负责）
#                     # province_id	bigint	所属省份 ID，标记小区在哪个省（关联省份维度数据）
#                     # province_name	string	省份名称（如 北京市/上海市 ），直观显示所属省份
#                     # city_id	bigint	所属城市 ID，标记小区在哪个城市（关联城市维度数据）
#                     # city_name	string	城市名称（如 北京市/上海市 ），直观显示所属城市
#                     # district_id	bigint	所属区县 ID，标记小区在哪个区县（关联区县维度数据）
#                     # district_name	string	区县名称（如 朝阳区/浦东新区 ），直观显示所属区县
#                     # dt	string	分区日期（如 20250801 ），按日期管理数据，方便按时间查询
#                 地区维度表(dim_region_full):
#                     # id	bigint	字典记录唯一 ID，每条数据的 “身份证”，方便精准关联
#                     # parent_id	bigint	父级分类 ID，用于构建 “父子层级”（比如 省份 是 城市 的父级 ）
#                     # name	string	字典名称（如 快递/物流/已签收 ），直观显示分类含义
#                     # dict_code	string	字典编码（如 BUSINESS_TYPE 下的 EXPRESS ），程序里用来标识分类
#                     # short_name	string	简称（可选），比如长名称是 普通快递，简称 普快，方便显示
#                     # dt	string	分区日期（如 20250801 ），按日期管理数据版本，支持历史回溯
#                 机构维度表(dim_organ_full):
#                     # id	bigint	机构维度记录的唯一标识，每条机构数据的 “身份证”
#                     # org_name	string	机构名称（如 北京转运中心/上海分拨站 ），直观识别机构
#                     # org_level	bigint	机构层级（比如 1 代表总部，2 代表分公司，3 代表站点 ），区分机构级别
#                     # region_id	bigint	所属区域 ID，关联区域维度表，标记机构所在的地理区域
#                     # region_name	string	区域名称（如 华北区/华东区 ），直观显示机构所属大区
#                     # region_code	string	区域编码（如 HB 代表华北，HD 代表华东 ），用于程序识别区域
#                     # org_parent_id	bigint	父级机构 ID，标记当前机构的上级组织（比如站点的父级是分公司 ）
#                     # org_parent_name	string	父级机构名称，直观显示上级组织名称（方便业务理解层级关系 ）
#                     # dt	string	分区日期（如 20250801 ），按日期管理机构数据版本，支持历史回溯
#                 快递员维度表(dim_express_courier_full):
#                     # id	bigint	这条关联记录的唯一标识，类似 “关联 ID”，方便精准查找
#                     # emp_id	bigint	员工 ID（关联员工主表），标记是哪个员工的业务关联信息
#                     # org_id	bigint	机构 ID（关联机构维度表），标记员工所属的物流机构（如站点、分拨中心 ）
#                     # org_name	string	机构名称，直观显示员工所属的机构名称（方便业务理解 ）
#                     # working_phone	string	工作电话，员工的业务联系号码（用于物流业务沟通，如派件、取件 ）
#                     # express_type	string	快递业务类型编码（如 STANDARD 代表标准快递，ECO 代表经济快递 ）
#                     # express_type_name	string	快递业务类型名称，直观显示员工负责的业务类型（方便识别 ）
#                     # dt	string	分区日期（如 20250801 ），按日期管理数据版本，支持历史数据回溯
#                 司机维度表(dim_truck_driver_full):
#                     # id	bigint	这条资质关联记录的唯一标识，方便精准管理单条数据
#                     # emp_id	bigint	员工 ID（关联员工主表），标记属于哪个员工的资质信息
#                     # org_id	bigint	机构 ID（关联机构维度表），标记员工所属的物流机构（如分公司、站点 ）
#                     # org_name	string	机构名称，直观显示员工所属的组织名称（方便业务识别 ）
#                     # team_id	bigint	团队 ID（关联团队表），标记员工所属的业务团队（如 “干线运输组” ）
#                     # team_name	string	团队名称，直观显示员工所在的具体业务小组
#                     # license_type	string	资质类型（如 A1 驾驶证/货运从业资格证 ），说明证照的业务属性
#                     # init_license_date	string	资质初始发证日期，记录证照的生效起始时间
#                     # expire_date	string	资质过期日期，标记证照失效时间（用于提醒续期、合规检查 ）
#                     # license_no	string	资质证书编号，证照的唯一编码（用于真伪校验、资质备案 ）
#                     # is_enabled	tinyint	资质是否有效（1 代表有效，0 代表失效 / 过期 ），快速判断合规性
#                     # dt	string	分区日期（如 20250801 ），按日期管理数据版本，支持历史回溯
#                 班次维度表(dim_shift_full):
#                     # id	bigint	这条运输线路记录的唯一标识，精准定位单条线路数据
#                     # line_id	bigint	线路主表 ID（关联线路基础信息），标记属于哪条线路的详细执行信息
#                     # line_name	string	线路名称（如 北京 - 上海干线 ），直观识别线路
#                     # line_no	string	线路编码（如 LN20250801 ），程序 / 业务侧唯一标识线路
#                     # line_level	string	线路级别（如 干线/支线 ），区分线路在运输网络中的层级
#                     # org_id	bigint	所属机构 ID（关联机构维度表），标记负责该线路的物流机构
#                     # transport_line_type_id	string	运输线路类型编码（如 TRUCK_LINE ），标记线路的运输方式类型
#                     # transport_line_type_name	string	运输线路类型名称（如 卡车干线 ），直观显示线路类型
#                     # start_org_id	bigint	起始机构 ID（关联机构维度表），标记线路的出发机构
#                     # start_org_name	string	起始机构名称（如 北京大兴转运中心 ），直观显示出发地
#                     # end_org_id	bigint	到达机构 ID（关联机构维度表），标记线路的到达机构
#                     # end_org_name	string	到达机构名称（如 上海虹桥分拨站 ），直观显示目的地
#                     # pair_line_id	bigint	配对线路 ID（如往返线路的返程线路 ID ），标记关联的互补线路
#                     # distance	decimal(10,2)	线路距离（单位：公里），记录运输里程
#                     # cost	decimal(10,2)	线路成本（单位：元），预估或实际的运输成本（油费、过路费等 ）
#                     # estimated_time	bigint	预计运输时长（单位：秒），标记完成线路运输的预估时间
#                     # start_time	string	实际发车时间，记录线路运输的出发时间点
#                     # driver1_emp_id	bigint	主司机 ID（关联司机维度表），标记负责该线路的第一位司机
#                     # driver2_emp_id	bigint	副司机 ID（关联司机维度表），标记负责该线路的第二位司机（长途线路常用 ）
#                     # truck_id	bigint	卡车 ID（关联卡车维度表），标记执行该线路的车辆
#                     # pair_shift_id	bigint	配对班次 ID（如往返班次的返程班次 ID ），标记关联的互补班次
#                     # dt	string	分区日期（如 20250801 ），按日期管理线路执行数据，支持历史回溯
#                 卡车维度表(dim_truck_full):
#                     # id	bigint	记录唯一标识，精准定位某条 “车队 - 车辆” 关联数据
#                     # team_id	bigint	车队 ID（关联车队主表），标记属于哪个车队的信息
#                     # team_name	string	车队名称（如 华北干线运输队 ），直观识别车队
#                     # team_no	string	车队编码（如 TM202508 ），业务 / 系统侧唯一标识车队
#                     # org_id	bigint	所属机构 ID（关联机构维度表），标记车队归属的物流机构（如分公司 ）
#                     # org_name	string	所属机构名称（如 北京分公司 ），直观显示车队的组织归属
#                     # manager_emp_id	bigint	车队负责人 ID（关联员工表），标记管理该车队的人员
#                     # truck_no	string	车牌号，车辆的唯一交通标识
#                     # truck_model_id	string	车辆型号编码（如 TRK2025 ），标记车辆的型号
#                     # truck_model_name	string	车辆型号名称（如 解放 J6P ），直观显示车辆型号
#                     # truck_model_type	string	车辆类型编码（如 TRUCK_TYPE_CARGO ），标记车辆的功能类型
#                     # truck_model_type_name	string	车辆类型名称（如 货运卡车 ），直观显示车辆用途
#                     # truck_model_no	string	车辆型号编号（厂家定义的型号编码 ），用于精准匹配车辆配置
#                     # truck_brand	string	车辆品牌编码（如 BRAND_LIBERTY ），标记车辆品牌
#                     # truck_brand_name	string	车辆品牌名称（如 解放 ），直观显示车辆品牌
#                     # truck_weight	decimal(16,2)	车辆自重（单位：吨），记录车辆本身的重量
#                     # load_weight	decimal(16,2)	核定载重（单位：吨），车辆允许的最大载货重量
#                     # total_weight	decimal(16,2)	总质量（单位：吨），车辆自重 + 核定载重（交通法规参考值 ）
#                     # eev	string	环保标识（如 国六 ），标记车辆的环保标准
#                     # boxcar_len	decimal(16,2)	货厢长度（单位：米），记录货厢尺寸
#                     # boxcar_wd	decimal(16,2)	货厢宽度（单位：米），记录货厢尺寸
#                     # boxcar_hg	decimal(16,2)	货厢高度（单位：米），记录货厢尺寸
#                     # max_speed	bigint	最高时速（单位：km/h ），车辆设计的最大行驶速度
#                     # oil_vol	bigint	油箱容量（单位：升），记录车辆燃油储备能力
#                     # device_gps_id	string	GPS 设备编号，标记车辆安装的定位设备
#                     # engine_no	string	发动机号，车辆发动机的唯一标识（维修 / 年检参考 ）
#                     # license_registration_date	string	车辆注册日期，记录车辆上牌时间
#                     # license_last_check_date	string	上次年检日期，标记车辆最近一次合规检查时间
#                     # license_expire_date	string	行驶证过期日期，标记车辆合法上路的截止时间
#                     # is_enabled	tinyint	车辆是否启用（1 启用 /0 停用 ），标记车辆的运营状态
#                     # dt	string	分区日期（如 20250801 ），按日期管理数据，支持历史回溯
#                 用户拉链表(dim_user_zip):
#                     # id	bigint	用户记录唯一标识，每条用户数据的 “身份证”，方便精准查询
#                     # login_name	string	登录用户名（如 zhangsan ），用户登录系统的账号
#                     # nick_name	string	昵称（如 快递小哥 ），用户自定义或系统分配的显示名
#                     # passwd	string	登录密码（加密存储），用于验证用户身份
#                     # real_name	string	真实姓名（如 张三 ），用户的实名信息
#                     # phone_num	string	手机号码（如 138xxxx1234 ），联系用户的主要方式
#                     # email	string	电子邮箱（如 zhangsan@xxx.com ），辅助联系或系统通知
#                     # user_level	string	用户等级（如 普通用户/VIP ），标记用户在系统中的权限 / 服务等级
#                     # birthday	string	出生日期（如 1990-01-01 ），用户的生日信息
#                     # gender	string	性别（如 男/女 ），用户的性别
#                     # start_date	string	账号生效日期（如 2025-08-01 ），用户可登录使用系统的起始时间
#                     # end_date	string	账号失效日期（如 2026-08-01 ），用户账号停止使用的截止时间（可用于权限管控 ）
#                     # dt	string	分区日期（如 20250801 ），按日期管理用户数据版本，支持历史回溯
#                 用户地址拉链表(dim_user_address_zip):
#                     # id	bigint	地址记录唯一标识，每条地址数据的 “身份证”，方便精准管理
#                     # user_id	bigint	用户 ID（关联用户信息表），标记这条地址属于哪个用户
#                     # phone	string	联系电话（如 138xxxx1234 ），地址对应的联系号码（可不同于用户主电话 ）
#                     # province_id	bigint	省份 ID（关联地区维度表），标记地址所在的省份
#                     # city_id	bigint	城市 ID（关联地区维度表），标记地址所在的城市
#                     # district_id	bigint	区县 ID（关联地区维度表），标记地址所在的区县
#                     # complex_id	bigint	小区 / 园区 ID（关联小区维度表），标记地址所在的具体小区 / 园区
#                     # address	string	详细地址（如 XX 街道 XX 号 XX 单元 ），补充具体门牌号等信息
#                     # is_default	tinyint	是否默认地址（1 是默认 /0 否 ），标记用户常用的首选地址
#                     # start_date	string	地址生效日期（如 2025-08-01 ），地址可用于物流服务的起始时间
#                     # end_date	string	地址失效日期（如 2026-08-01 ），地址停止使用的截止时间（如搬家后旧地址失效 ）
#                     # dt	string	分区日期（如 20250801 ），按日期管理地址数据版本，支持历史回溯
#             DWD层:
#                 主要对 ODS 层原始数据进行清洗、转换和业务建模，生成结构化的明细事实表，为后续的数据分析和挖掘提供高质量的基础数据。
#                 结合具体表结构，从核心定位、表类型及作用、数据处理特点和业务价值四个方面进行介绍
#                     一、核心定位
#                         DWD 层聚焦于物流业务的全流程明细记录，通过对 ODS 层（如订单、运输、中转等原始数据）进行字段规范化、冗余字段剔除、业务含义补充等处理，
#                         将分散的原始数据转化为符合业务逻辑的明细事实表。这些表以 “事务” 或 “事件” 为核心，精准记录物流业务中每一个关键操作的细节，
#                         是后续 DWS 层汇总分析和 ADS 层指标展示的基础。
#                     二、主要表类型及作用
#                         根据物流业务流程，DWD 层的表可分为交易域、物流域、中转域三大类，每类表对应特定业务环节的明细记录：
#                         （一）交易域表：聚焦订单交易全生命周期
#                             记录订单从下单到支付、取消等交易环节的明细信息，核心表包括：
#                                 dwd_trade_order_detail_inc：订单下单明细事实表，存储下单时间、货物类型、重量、收发地址等基础信息，是订单全流程分析的起点。
#                                 dwd_trade_pay_suc_detail_inc：支付成功明细事实表，补充支付方式、支付时间等交易信息，用于统计支付转化率、支付时效等指标。
#                                 dwd_trade_order_cancel_detail_inc：订单取消明细事实表，记录取消时间和原因（隐含于状态中），助力分析取消率及原因分布。
#                                 dwd_trade_order_process_inc：订单累积快照事实表，跟踪订单从下单到签收 / 取消的全流程状态变化，通过start_date和end_date记录各状态的有效时间，方便回溯订单生命周期。
#                         （二）物流域表：覆盖运输全环节操作
#                             记录订单从揽收到派送、签收的物流操作明细，核心表包括：
#                                 dwd_trans_receive_detail_inc：揽收明细事实表，存储揽收时间、负责快递员等信息，用于分析揽收时效和区域覆盖情况。
#                                 dwd_trans_dispatch_detail_inc：发单明细事实表，记录订单分配给快递员的时间，辅助优化派单效率。
#                                 dwd_trans_bound_finish_detail_inc：转运完成明细事实表，记录中转环节的完成时间，用于监控中转时效。
#                                 dwd_trans_deliver_suc_detail_inc：派送成功明细事实表，记录派送时间，可结合预计到达时间分析派送准时率。
#                                 dwd_trans_sign_detail_inc：签收明细事实表，记录最终签收时间，是订单完成的关键节点记录。
#                                 dwd_trans_trans_finish_inc：运输任务明细事实表，聚焦干线 / 支线运输环节，记录司机、车辆、行驶距离、耗时等信息，用于分析运输效率和成本。
#                         （三）中转域表：聚焦仓储中转操作
#                             记录订单在中转中心的入库、分拣、出库等操作明细，核心表包括：
#                                 dwd_bound_inbound_inc：入库明细事实表，存储入库时间和操作人员，用于监控入库效率。
#                                 dwd_bound_sort_inc：分拣明细事实表，记录分拣时间和人员，辅助优化分拣流程。
#                                 dwd_bound_outbound_inc：出库明细事实表，记录出库时间，结合入库时间分析中转停留时长。
#                     三、数据处理特点
#                         增量更新：所有表均通过dt字段按日期分区，采用增量加载（_inc后缀），仅处理当日新增或变更的数据，提升处理效率。
#                         字段规范化：
#                             补充业务名称：如将cargo_type（货物类型 ID）关联字典表，生成cargo_type_name（如 “生鲜”“日用品”），便于业务理解。
#                             敏感信息脱敏：对收件人姓名、手机号等采用部分替换（如concat(substr(name, 1, 1), '*')），符合数据安全规范。
#                             时间格式化：将时间戳转换为yyyy-MM-dd HH:mm:ss格式，统一时间字段标准。
#                             业务逻辑整合：关联多源数据补充信息，例如订单表关联货物表获取重量、体积，关联地址表补充省 / 市 / 区信息，形成完整业务视图。
#                             状态追踪：通过status和status_name字段记录业务状态（如订单 “待揽收”“运输中”），清晰反映业务进展。
#             总结
#                 DWD 层通过对物流业务的全流程明细建模，将原始数据转化为结构化、高质量的事实表，
#                 不仅解决了 ODS 层数据杂乱、不规范的问题，还为后续的汇总分析提供了统一的数据基础。
#                 其核心价值在于 “明细化、规范化、业务化”，是物流数仓中连接原始数据与业务决策的关键桥梁。
#
#             DWS层:
#                 DWS（Data Warehouse Service，数据仓库服务层）是物流离线数仓中基于 DWD 层明细数据进行汇总聚合的关键层级，
#                     主要通过对业务指标的多维度、多粒度汇总，为上层数据分析和决策支持提供直接可用的统计结果。从核心定位、表类型及作用、数据处理特点和业务价值四个方面进行介绍
#                 一、核心定位
#                     DWS 层聚焦于业务指标的汇总与聚合，通过对 DWD 层的明细事实表（如订单、揽收、运输等）按不同维度（如机构、地区、货物类型、时间）
#                     和粒度（如 1 日、n 日、历史至今）进行统计计算，生成标准化的汇总指标表。其核心目标是将分散的明细数据转化为可直接用于分析的 “指标结果”，
#                     减少上层应用的计算压力，提升分析效率。
#                 二、主要表类型及核心指标
#                     DWS 层的表按业务域和统计粒度划分，覆盖物流全流程的关键指标，主要包括以下类别：
#                         （一）交易域：聚焦订单交易指标
#                             以 “机构 + 货物类型” 为核心维度，统计订单下单量和金额，支撑交易规模分析：
#                                 dws_trade_org_cargo_type_order_1d：按机构、城市、货物类型粒度，每日汇总下单数和下单金额，用于监控单日各机构的货物接单情况。
#                                 dws_trade_org_cargo_type_order_nd：在 1 日表基础上，扩展 “最近 7/30 日” 的汇总指标，
#                                                                    分析中短期交易趋势，例如某转运站近 30 日生鲜类货物的订单增长情况。
#                         （二）物流域：覆盖运输全环节操作指标
#                             按 “转运站、班次、卡车类型” 等维度，统计揽收、发单、运输、派送等环节的效率指标：
#                                 1.揽收环节
#                                     dws_trans_org_receive_1d：按转运站、省份、城市粒度，每日汇总揽收次数和金额，反映末端揽收能力。
#                                     dws_trans_org_receive_nd：扩展为最近 7/30 日的揽收指标，用于区域揽收效率对比（如北京朝阳区与上海浦东区近 7 日揽收量差异）。
#                                 2.发单与转运环节
#                                     dws_trans_dispatch_1d/dws_trans_dispatch_nd：汇总每日及最近 7/30 日的发单总数和金额，监控发单规模。
#                                     dws_trans_dispatch_td/dws_trans_bound_finish_td：统计历史至今的发单和转运完成总量，用于长期业务规模评估（如年度总发单量）。
#                                 3.运输环节
#                                     dws_trans_org_truck_model_type_trans_finish_1d：按机构、卡车类型粒度，每日汇总运输完成次数、里程和时长，
#                                                                                     分析不同车型的运输效率（如冷藏车与普通货车的单日运输里程对比）。
#                                     dws_trans_shift_trans_finish_nd：按班次、线路、司机粒度，汇总最近 7/30 日的运输完成量、逾期次数等，用于评估班次准点率和司机绩效。
#                                 4.派送与分拣环节
#                                     dws_trans_org_deliver_suc_1d/dws_trans_org_deliver_suc_nd：按转运站粒度，统计每日及最近 7/30 日的派送成功次数，
#                                                                                                反映末端配送质量。
#                                     dws_trans_org_sort_1d/dws_trans_org_sort_nd：按机构粒度汇总每日及近 7/30 日的分拣次数，优化中转中心分拣流程。
#                 三、数据处理特点
#                     1.多粒度汇总：
#                         通过 “1 日表 + nd 表 + 历史至今表” 覆盖不同时间粒度（单日、短期、长期），满足从日常监控到战略分析的多样化需求。例如：
#                             1 日表用于实时监控当日业务量；
#                             7/30 日表用于周 / 月业务复盘；
#                             历史至今表（如dws_trans_dispatch_td）用于年度业务总结。
#                     2.维度关联丰富：
#                         结合 DIM 层维度表补充地理和组织信息，例如通过dim_region_full关联城市名称，
#                         dim_organ_full关联机构名称，使汇总结果更易理解（如 “上海虹桥转运站” 而非单纯的机构 ID）。
#                     3.增量聚合逻辑：
#                         每日装载时，基于 DWD 层当日明细数据（如dwd_trans_receive_detail_inc）聚合生成 1 日表，
#                         再通过lateral view explode扩展为 nd 表，避免全量重算，提升效率。例如：
#                             从 DWD 层揽收明细中提取当日数据，聚合为dws_trans_org_receive_1d；
#                             再通过关联近 7 日的 1 日表数据，汇总生成dws_trans_org_receive_nd的 7 日指标。
#                     4.指标标准化：
#                         统一指标定义（如下单数、运输里程等），确保不同表之间的指标可比，例如 “订单数” 在交易域和物流域均指独立订单的计数。
#                 四、业务价值
#                     1.效率提升：
#                         通过预聚合减少上层分析的计算量，例如业务人员查询 “某机构近 30 日派送量” 时，可直接从dws_trans_org_deliver_suc_nd获取结果，无需重复计算明细数据。
#                     2.多维度决策支持：
#                         提供机构、区域、货物类型等多维度交叉分析能力，例如：
#                             运营部门通过dws_trade_org_cargo_type_order_nd发现某机构电子产品订单占比过高，可针对性调配运力；
#                             管理层通过dws_trans_shift_trans_finish_nd分析班次逾期率，优化线路规划。
#                     3.业务监控可视化：
#                         汇总指标可直接用于仪表盘展示，实时监控关键业务节点（如每日揽收量、运输延误次数），及时发现异常并调整策略。
#             DWS 层是物流数仓中 “指标聚合中枢”，通过对 DWD 层明细数据的多维度、多粒度汇总，将业务数据转化为可直接用于分析的统计指标。
#             其核心价值在于提升分析效率、支撑多维度决策、实现业务可视化监控，是连接明细数据与业务应用的关键桥梁。
#
#             ADS层:
#                 ADS（Application Data Service，应用数据服务层）是物流离线数仓体系的顶层，直接面向业务应用和决策支持，
#                     通过对 DWS 层汇总数据的进一步整合与指标提炼，生成可直接用于业务分析、可视化展示的最终指标表。
#                 一、核心定位
#                     ADS 层聚焦于业务指标的最终呈现，基于 DWS 层的汇总数据，按业务主题（如物流综合、运单、城市机构等）聚合生成高层级指标，消除技术细节，直接服务于业务决策。
#                 二、主要表类型及核心指标
#                     ADS 层按业务主题划分，覆盖物流全链条的关键监控指标，主要包括以下类别：
#                         （一）物流综合统计主题
#                             聚焦物流全流程的核心操作指标，反映整体运营规模与效率：
#                                 ads_trans_order_stats：统计最近 1/7/30 日的接单总数、接单金额、发单总数、发单金额，监控物流订单的流转规模。
#                                 ads_trans_stats：汇总最近 1/7/30 日的运输完成次数、里程、时长，评估整体运输效率。
#                                 ads_trans_order_stats_td：统计历史至今的运输中运单总数及金额，反映在途货物规模。
#                         （二）运单分析主题
#                             围绕订单交易环节，分析订单量与货物类型分布：
#                                 ads_order_stats：统计最近 1/7/30 日的下单数和金额，反映订单交易规模。
#                                 ads_order_cargo_type_stats：按货物类型（如生鲜、日用品）统计近 1/7/30 日的下单数和金额，用于分析货物结构与需求差异。
#                         （三）城市与机构分析主题
#                             按地理和组织维度拆解业务指标，支撑区域和机构绩效评估：
#                                 ads_city_stats：按城市粒度统计近 1/7/30 日的下单数、运输完成次数、平均运输里程 / 时长等，对比不同城市的物流运营效率
#                                                 （如北京与上海的平均运输时长差异）。
#                                 ads_org_stats：按机构（如转运站）粒度统计近 1/7/30 日的下单数、运输完成情况及平均效率，评估各机构的业务贡献与运营水平。
#                         （四）线路与班次分析主题
#                             聚焦运输网络中的线路和班次表现：
#                                 ads_shift_stats：统计近 7/30 日各班次的运输完成次数、里程、时长及运单数，评估班次的稳定性与承载能力。
#                                 ads_line_stats：按线路粒度汇总近 7/30 日的运输指标，分析线路的繁忙程度与效率（如 “北京 - 广州” 干线的日均运输里程）。
#                         （五）人员与资源分析主题
#                             评估司机和卡车等核心资源的利用效率：
#                                 ads_driver_stats：统计近 7/30 日各司机的运输次数、里程、时长、逾期次数及平均效率，用于司机绩效排名与调度优化。
#                                 ads_truck_stats：按卡车类型（如冷藏车、普通货车）统计近 1/7/30 日的运输指标及平均效率，分析不同车型的资源利用情况。
#                         （六）快递末端分析主题
#                             聚焦末端揽收、派送与分拣环节，反映终端服务质量：
#                                 ads_express_stats：汇总近 1/7/30 日的派送成功次数和分拣次数，监控末端处理规模。
#                                 ads_express_province_stats/ads_express_city_stats/ads_express_org_stats：
#                                     分别按省份、城市、机构粒度统计近 1/7/30 日的揽收、派送、分拣指标，支撑末端服务的区域化管理（如某省份的揽收量与派送成功率对比）。
#                     三、数据处理特点
#                         主题化聚合：按业务主题（如物流综合、城市分析）整合分散的 DWS 指标，形成完整的业务视图。例如，ads_city_stats整合了 DWS 层的订单、运输等多类指标，
#                             全面反映城市物流表现。
#                         指标标准化：统一指标定义与计算逻辑，确保跨主题指标的可比性。例如，“运输完成次数” 在城市、机构、线路主题中均指独立运输任务的完成计数。
#                         多时间粒度覆盖：支持最近 1/7/30 日及历史至今的指标统计，满足短期监控（如日报）、中期复盘（如周报）和长期分析（如年度总结）的需求。
#                         维度补全与关联：结合 DIM 层补充名称信息（如城市名、机构名），使指标结果更易理解和展示，例如将 “city_id=110100” 转换为 “北京市”。
#                         增量与全量结合：每日装载时，通过 “union” 合并历史数据与当日新增数据，确保指标的连续性和完整性（如ads_trans_order_stats同时包含
#                             历史累计和当日新增的订单指标）。
#                     四、业务价值
#                         决策支持：为管理层提供直观的业务指标（如各城市的运输效率、司机绩效排名），辅助资源调配与战略规划（如向高需求城市增派运力）。
#                         业务监控：指标可直接用于可视化仪表盘，实时监控关键环节（如末端派送成功率、班次逾期率），及时发现异常并调整运营策略。
#                         绩效评估：按机构、人员、线路等维度拆解指标，为绩效考核提供数据依据（如某转运站的月度运输完成量达标率）。
#                         问题定位：通过多维度指标对比（如某城市的高下单量与低运输效率），快速定位业务瓶颈（如该城市的运力不足）。
#                 总结
#                     ADS 层是物流数仓的 “最终输出层”，通过主题化整合和指标提炼，将底层数据转化为业务可直接使用的决策信息。
#                     其核心价值在于消除技术壁垒、聚焦业务目标、支撑高效决策，是连接数据仓库与业务应用的最终桥梁。
#
